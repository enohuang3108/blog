---
import BaseHead from "@/components/BaseHead.astro";
import { Header } from "@/components/Header.tsx";
import ScrollToTop from "@/components/ScrollToTop.tsx";
import { Analytics } from "@vercel/analytics/react";
import { fade, ViewTransitions } from "astro:transitions";

const { ...head } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead {...head} />
    <ViewTransitions />
  </head>
  <body class="bg-dot min-h-screen w-full font-sans">
    <Header client:load url={Astro.url} />
    <main
      class="relative mx-auto max-w-3xl grow px-6 pb-16 pt-24 sm:pt-36"
      transition:animate={fade({ duration: "0.4s" })}
    >
      <slot />
      <ScrollToTop client:load />
    </main>
    <Analytics />
    <script>
      // Source: https://github.com/JuanM04/portfolio/blob/983b0ed0eabdac37bf8b7912d3e8128a443192b9/src/pages/docs/%5B...documentSlug%5D.astro#L74-L103
      // From this comment: https://github.com/withastro/astro/issues/4433#issuecomment-1584019991
      /**
       * @params {HTMLCollectionOf<HTMLElement>} graphs
       */
      async function renderDiagrams(graphs) {
        const { default: mermaid } = await import("mermaid");
        mermaid.initialize({
          startOnLoad: false,
          fontFamily: "var(--sans-font)",
          // @ts-ignore This works, but TS expects a enum for some reason
          theme: window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default",
        });

        for (const graph of graphs) {
          const content = graph.querySelector(".mermaid-src").innerText;
          if (!content) continue;
          let svg = document.createElement("svg");
          const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000));
          graph.appendChild(svg);
          mermaid.render(id, content).then((result) => {
            graph.innerHTML = result.svg;
          });
        }
      }

      const graphs = document.getElementsByClassName("mermaid");
      if (document.getElementsByClassName("mermaid").length > 0) {
        renderDiagrams(graphs);
      }
    </script>
  </body>
</html>
