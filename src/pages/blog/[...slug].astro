---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { type CollectionPosts } from "@/types";
import { getPosts } from "@/utils/posts";

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((post) => {
    return {
      params: { slug: post.slug },
      props: {
        post,
      },
    };
  });
}

type Props = { post: CollectionPosts };

const { post } = Astro.props;
const { title, image, description, date, duration, tag } = post.data;

const { Content } = await post.render();

function getDate(date: string) {
  return new Date(date).toISOString();
}
---

<BaseLayout title={title} description={description} pageType="article">
  <article class="prose">
    <h1>{title}</h1>
    <p style="opacity: 0.5;">
      {date && <time datetime={getDate(date)}>{date.split(",")}</time>}
      {duration && <span>· {duration}</span>}
      {tag && <span>· {tag}</span>}
    </p>
    {
      image && (
        <p>
          <img width="640" height="360" src={image.src} alt={image.alt || ""} />
        </p>
      )
    }
    <Content />
  </article>

  <script>
    document.addEventListener("astro:page-load", () => {
      const graphs = document.getElementsByClassName("mermaid");
      if (graphs.length === 0) return;

      async function renderDiagrams(graphs) {
        try {
          const { default: mermaid } = await import("mermaid");
          mermaid.initialize({
            startOnLoad: false,
            theme: document.documentElement.classList.contains("dark")
              ? "dark"
              : "default",
          });

          for (const graph of graphs) {
            const content = graph.querySelector(".mermaid-src")?.innerText;
            if (!content) continue;

            const svg = document.createElement("svg");
            const id = `mermaid-${Math.round(Math.random() * 100000)}`;
            svg.id = id;

            try {
              const { svg: renderedSvg } = await mermaid.render(id, content);
              graph.innerHTML = renderedSvg;
              graph.querySelector(".mermaid-src")?.remove();
            } catch (error) {
              console.error("Mermaid rendering failed:", error);
              graph.innerHTML =
                '<div class="mermaid-error">Mermaid rendering failed</div>';
            }
          }
        } catch (error) {
          console.error("Failed to load Mermaid:", error);
        }
      }

      // Use requestAnimationFrame to avoid blocking the main thread
      requestAnimationFrame(() => renderDiagrams(graphs));
    });
  </script>
</BaseLayout>
