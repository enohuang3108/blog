---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { type CollectionPosts } from "@/types";
import { getPosts } from "@/utils/posts";

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((post) => {
    return {
      params: { slug: post.slug },
      props: {
        post,
      },
    };
  });
}

type Props = { post: CollectionPosts };

const { post } = Astro.props;
const { title, image, description, date, duration, tag } = post.data;

const { Content } = await post.render();

function getDate(date: string) {
  return new Date(date).toISOString();
}
---

<BaseLayout title={title} description={description} pageType="article">
  <article class="prose">
    <h1>{title}</h1>
    <p style="opacity: 0.5;">
      {date && <time datetime={getDate(date)}>{date.split(",")}</time>}
      {duration && <span>· {duration}</span>}
      {tag && <span>· {tag}</span>}
    </p>
    {
      image && (
        <p>
          <img width="640" height="360" src={image.src} alt={image.alt || ""} />
        </p>
      )
    }
    <Content />
  </article>

  <script>
    document.addEventListener("astro:page-load", () => {
      // Source: https://github.com/JuanM04/portfolio/blob/983b0ed0eabdac37bf8b7912d3e8128a443192b9/src/pages/docs/%5B...documentSlug%5D.astro#L74-L103
      // From this comment: https://github.com/withastro/astro/issues/4433#issuecomment-1584019991
      /**
       * @params {HTMLCollectionOf<HTMLElement>} graphs
       */
      const graphs = document.getElementsByClassName("mermaid");
      const mermaidSrcExists = document.querySelector(".mermaid-src");

      if (graphs.length > 0 && mermaidSrcExists) {
        async function renderDiagrams(graphs) {
          const { default: mermaid } = await import("mermaid");
          mermaid.initialize({
            startOnLoad: false,
            fontFamily: "var(--sans-font)",
            // @ts-ignore This works, but TS expects a enum for some reason
            theme: window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "default",
          });

          for (const graph of graphs) {
            const content = graph.querySelector(".mermaid-src").innerText;
            if (!content) continue;
            let svg = document.createElement("svg");
            const id = (svg.id =
              "mermaid-" + Math.round(Math.random() * 100000));
            graph.appendChild(svg);
            mermaid.render(id, content).then((result) => {
              graph.innerHTML = result.svg;
            });
          }
        }
        renderDiagrams(graphs);
      }
    });
  </script>
</BaseLayout>
